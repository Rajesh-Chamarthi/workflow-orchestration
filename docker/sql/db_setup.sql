DROP TABLE if exists load_status;

create table if not exists load_status(
    load_status_cd varchar(25) NOT NULL,
    load_status_desc varchar(250) NOT NULL,
    PRIMARY KEY (load_status_cd)
);

DROP TABLE if exists data_feed_config;
create table if not exists data_feed_config(
    feed_config_id int generated by default as identity,
    feed_category varchar(50) not null,
    supplier_id int not null,
    supplier_name varchar(100) not null,
    feed_id int not null,
    feed_typ_id int not null,
    feed_typ_nm varchar(50) not null,
    feed_intrnl_nm varchar(100) not null,
    pipeline_id int not null,
    feed_actv_flg  boolean not null,
    cre_ts timestamp not null,
    updt_ts timestamp not null,
    unique(feed_id,supplier_id)
);

DROP TABLE if exists task_details;
create table if not exists task_details(
    task_id int generated by default as identity,
    task_name varchar(40) not null,
    resource_details varchar(50) not null,
    end_point_details VARCHAR(250) not null,
    cre_ts timestamp not null,
    updt_ts timestamp not null,
    PRIMARY KEY(task_name)
);

DROP TABLE if exists pipeline_details;
create table if not exists pipeline_details(
    pipeline_id int not null,
    exec_order int not null,
    task_name varchar(40) not null,
    cre_ts timestamp not null,
    updt_ts timestamp not null,
    unique(pipeline_id,exec_order,task_name),
    --constraint fk_feed_id FOREIGN KEY(feed_id) REFERENCES data_feed_config(feed_id),
    --constraint fk_supplier_id FOREIGN KEY(supplier_id) REFERENCES data_feed_config(supplier_id),
    constraint fk_task_nm FOREIGN KEY(task_name) REFERENCES task_details(task_name)
);

DROP TABLE if exists job_log;
CREATE table if not exists job_log(
    job_queue_id int generated by default as identity,
    batch_id int,
    feed_id int not null,
    pipeline_id int not null,
    supplier_id int not null,
    file_name varchar(300) not null,
    task_name varchar(40) not null,
    exec_order int not null,
    load_status_cd varchar(20) not null,
    error_msg text,
    cre_ts timestamp not null,
    updt_ts timestamp not null,
    PRIMARY KEY(job_queue_id),
    --unique(batch_id,exec_order,task_name),
    constraint fk_load_status_cd FOREIGN key(load_status_cd) REFERENCES load_status(load_status_cd)
);


-- load status
INSERT INTO public.load_status (load_status_cd, load_status_desc) VALUES('pending', 'Initial status');
INSERT INTO public.load_status (load_status_cd, load_status_desc) VALUES('queued', 'job/task has been released and it is yet to be picked by service');
INSERT INTO public.load_status (load_status_cd, load_status_desc) VALUES('running', 'job/task has been picked by service and running');
INSERT INTO public.load_status (load_status_cd, load_status_desc) VALUES('completed', 'job/task has been completed successfully');
INSERT INTO public.load_status (load_status_cd, load_status_desc) VALUES('failed', 'processing failed (application/system)');
INSERT INTO public.load_status (load_status_cd, load_status_desc) VALUES('force_completed', 'running or queued job/task has been force completed');
INSERT INTO public.load_status (load_status_cd, load_status_desc) VALUES('failed_force_completed', 'failed job/task has been force completed');


-- feed config
INSERT INTO public.data_feed_config(feed_category, supplier_id, supplier_name, feed_id, feed_typ_id, feed_typ_nm, feed_intrnl_nm,pipeline_id, feed_actv_flg, cre_ts, updt_ts)
VALUES('MARKETPLACE_FEED', 100, 'officeally', 425, 2, 'MEDICALCLAIMS', 'officeally Medical Claims',2, TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO public.data_feed_config(feed_category, supplier_id, supplier_name, feed_id, feed_typ_id, feed_typ_nm, feed_intrnl_nm,pipeline_id, feed_actv_flg, cre_ts, updt_ts)
VALUES('MARKETPLACE_FEED', 179, 'inovalon', 177, 1, 'RXCLAIMS', 'Inovalon Pharmacy Claims',3, TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO public.data_feed_config(feed_category, supplier_id, supplier_name, feed_id, feed_typ_id, feed_typ_nm, feed_intrnl_nm,pipeline_id, feed_actv_flg, cre_ts, updt_ts)
VALUES('MARKETPLACE_FEED', 179, 'inovalon', 176, 2, 'MEDICALCLAIMS', 'Inovalon Medical Claims',1, TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO public.data_feed_config(feed_category, supplier_id, supplier_name, feed_id, feed_typ_id, feed_typ_nm, feed_intrnl_nm,pipeline_id, feed_actv_flg, cre_ts, updt_ts)
VALUES('MARKETPLACE_FEED', 179, 'inovalon', 179, 2, 'MEDICALCLAIMS', 'Inovalon Enrollment',4, TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO public.data_feed_config(feed_category, supplier_id, supplier_name, feed_id, feed_typ_id, feed_typ_nm, feed_intrnl_nm,pipeline_id, feed_actv_flg, cre_ts, updt_ts)
VALUES('MARKETPLACE_FEED', 101, 'horizon', 365, 1, 'RXCLAIMS', 'Horizon Blue Cross Blue Shield - Rx',5, TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO public.data_feed_config(feed_category, supplier_id, supplier_name, feed_id, feed_typ_id, feed_typ_nm, feed_intrnl_nm,pipeline_id, feed_actv_flg, cre_ts, updt_ts)
VALUES('MARKETPLACE_FEED', 101, 'horizon', 364, 2, 'MEDICALCLAIMS', 'Horizon Blue Cross Blue Shield - Dx',6, TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO public.data_feed_config(feed_category, supplier_id, supplier_name, feed_id, feed_typ_id, feed_typ_nm, feed_intrnl_nm,pipeline_id, feed_actv_flg, cre_ts, updt_ts)
VALUES('MARKETPLACE_FEED', 101, 'horizon', 363, 2, 'Enrollment', 'Horizon Blue Cross Blue Shield - Enrollment',7, TRUE, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

--task_details
INSERT INTO public.task_details(task_name, resource_details, end_point_details, cre_ts, updt_ts)
VALUES('LANDING', 'RD', 'EPD', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO public.task_details(task_name, resource_details, end_point_details, cre_ts, updt_ts)
VALUES('DECOMPRESSION', 'RD', 'EPD', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO public.task_details(task_name, resource_details, end_point_details, cre_ts, updt_ts)
VALUES('MATCHING', 'RD', 'EPD', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO public.task_details(task_name, resource_details, end_point_details, cre_ts, updt_ts)
VALUES('VALIDATION', 'RD', 'EPD', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO public.task_details(task_name, resource_details, end_point_details, cre_ts, updt_ts)
VALUES('CDC', 'RD', 'EPD', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO public.task_details(task_name, resource_details, end_point_details, cre_ts, updt_ts)
VALUES('DEDUPE', 'RD', 'EPD', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO public.task_details(task_name, resource_details, end_point_details, cre_ts, updt_ts)
VALUES('DATA_QUALITY', 'RD', 'EPD', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO public.task_details(task_name, resource_details, end_point_details, cre_ts, updt_ts)
VALUES('METRICS', 'RD', 'EPD', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

-- pipeline details
INSERT INTO public.pipeline_details (pipeline_id, exec_order, task_name, cre_ts, updt_ts)
VALUES(2, 1, 'LANDING', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO public.pipeline_details (pipeline_id, exec_order, task_name, cre_ts, updt_ts)
VALUES(2, 2, 'DATA_QUALITY', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO public.pipeline_details (pipeline_id, exec_order, task_name, cre_ts, updt_ts)
VALUES(2, 2, 'METRICS', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO public.pipeline_details (pipeline_id, exec_order, task_name, cre_ts, updt_ts)
VALUES(2, 3, 'VALIDATION', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO public.pipeline_details (pipeline_id, exec_order, task_name, cre_ts, updt_ts)
VALUES(2, 4, 'DEDUPE', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO public.pipeline_details (pipeline_id, exec_order, task_name, cre_ts, updt_ts)
VALUES(2, 5, 'CDC', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT INTO public.pipeline_details (pipeline_id, exec_order, task_name, cre_ts, updt_ts)
VALUES(3, 1, 'MATCHING', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO public.pipeline_details (pipeline_id, exec_order, task_name, cre_ts, updt_ts)
VALUES(3, 2, 'METRICS', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO public.pipeline_details (pipeline_id, exec_order, task_name, cre_ts, updt_ts)
VALUES(3, 3, 'VALIDATION', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO public.pipeline_details (pipeline_id, exec_order, task_name, cre_ts, updt_ts)
VALUES(3, 4, 'DEDUPE', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO public.pipeline_details (pipeline_id, exec_order, task_name, cre_ts, updt_ts)
VALUES(3, 4, 'CDC', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT INTO public.pipeline_details (pipeline_id, exec_order, task_name, cre_ts, updt_ts)
VALUES(1, 1, 'DECOMPRESSION', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO public.pipeline_details (pipeline_id, exec_order, task_name, cre_ts, updt_ts)
VALUES(1, 2, 'METRICS', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO public.pipeline_details (pipeline_id, exec_order, task_name, cre_ts, updt_ts)
VALUES(1, 2, 'DATA_QUALITY', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO public.pipeline_details (pipeline_id, exec_order, task_name, cre_ts, updt_ts)
VALUES(1, 3, 'CDC', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO public.pipeline_details (pipeline_id, exec_order, task_name, cre_ts, updt_ts)
VALUES(1, 3, 'DEDUPE', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO public.pipeline_details (pipeline_id, exec_order, task_name, cre_ts, updt_ts)
VALUES(1, 4, 'VALIDATION', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT INTO public.pipeline_details (pipeline_id, exec_order, task_name, cre_ts, updt_ts)
VALUES(4, 1, 'DECOMPRESSION', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO public.pipeline_details (pipeline_id, exec_order, task_name, cre_ts, updt_ts)
VALUES(4, 2, 'METRICS', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO public.pipeline_details (pipeline_id, exec_order, task_name, cre_ts, updt_ts)
VALUES(4, 3, 'DEDUPE', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO public.pipeline_details (pipeline_id, exec_order, task_name, cre_ts, updt_ts)
VALUES(4, 4, 'CDC', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO public.pipeline_details (pipeline_id, exec_order, task_name, cre_ts, updt_ts)
VALUES(4, 5, 'VALIDATION', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT INTO public.pipeline_details (pipeline_id, exec_order, task_name, cre_ts, updt_ts)
VALUES(5, 1, 'DECOMPRESSION', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO public.pipeline_details (pipeline_id, exec_order, task_name, cre_ts, updt_ts)
VALUES(5, 1, 'METRICS', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO public.pipeline_details (pipeline_id, exec_order, task_name, cre_ts, updt_ts)
VALUES(5, 1, 'DATA_QUALITY', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT INTO public.pipeline_details (pipeline_id, exec_order, task_name, cre_ts, updt_ts)
VALUES(6, 1, 'DECOMPRESSION', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO public.pipeline_details (pipeline_id, exec_order, task_name, cre_ts, updt_ts)
VALUES(6, 2, 'METRICS', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO public.pipeline_details (pipeline_id, exec_order, task_name, cre_ts, updt_ts)
VALUES(6, 2, 'DATA_QUALITY', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT INTO public.pipeline_details (pipeline_id, exec_order, task_name, cre_ts, updt_ts)
VALUES(7, 1, 'DECOMPRESSION', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO public.pipeline_details (pipeline_id, exec_order, task_name, cre_ts, updt_ts)
VALUES(7, 2, 'METRICS', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO public.pipeline_details (pipeline_id, exec_order, task_name, cre_ts, updt_ts)
VALUES(7, 3, 'DATA_QUALITY', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

